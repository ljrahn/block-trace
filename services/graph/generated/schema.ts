// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ProductCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProductCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProductCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProductCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ProductCreated | null {
    return changetype<ProductCreated | null>(
      store.get("ProductCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get productId(): BigInt {
    let value = this.get("productId");
    return value!.toBigInt();
  }

  set productId(value: BigInt) {
    this.set("productId", Value.fromBigInt(value));
  }

  get productName(): string {
    let value = this.get("productName");
    return value!.toString();
  }

  set productName(value: string) {
    this.set("productName", Value.fromString(value));
  }

  get productWeight(): string {
    let value = this.get("productWeight");
    return value!.toString();
  }

  set productWeight(value: string) {
    this.set("productWeight", Value.fromString(value));
  }

  get ipfsDocumentUrl(): string {
    let value = this.get("ipfsDocumentUrl");
    return value!.toString();
  }

  set ipfsDocumentUrl(value: string) {
    this.set("ipfsDocumentUrl", Value.fromString(value));
  }

  get companyName(): Array<string> | null {
    let value = this.get("companyName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set companyName(value: Array<string> | null) {
    if (!value) {
      this.unset("companyName");
    } else {
      this.set("companyName", Value.fromStringArray(<Array<string>>value));
    }
  }

  get location(): Array<string> | null {
    let value = this.get("location");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set location(value: Array<string> | null) {
    if (!value) {
      this.unset("location");
    } else {
      this.set("location", Value.fromStringArray(<Array<string>>value));
    }
  }

  get travelMethod(): Array<string> | null {
    let value = this.get("travelMethod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set travelMethod(value: Array<string> | null) {
    if (!value) {
      this.unset("travelMethod");
    } else {
      this.set("travelMethod", Value.fromStringArray(<Array<string>>value));
    }
  }

  get signer(): Array<Bytes> | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set signer(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateInstance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateInstance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateInstance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateInstance", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UpdateInstance | null {
    return changetype<UpdateInstance | null>(
      store.get("UpdateInstance", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get instanceId(): Bytes {
    let value = this.get("instanceId");
    return value!.toBytes();
  }

  set instanceId(value: Bytes) {
    this.set("instanceId", Value.fromBytes(value));
  }

  get productId(): BigInt {
    let value = this.get("productId");
    return value!.toBigInt();
  }

  set productId(value: BigInt) {
    this.set("productId", Value.fromBigInt(value));
  }

  get timeStamp(): Array<BigInt> | null {
    let value = this.get("timeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set timeStamp(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("timeStamp");
    } else {
      this.set("timeStamp", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get signedOff(): Array<boolean> | null {
    let value = this.get("signedOff");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBooleanArray();
    }
  }

  set signedOff(value: Array<boolean> | null) {
    if (!value) {
      this.unset("signedOff");
    } else {
      this.set("signedOff", Value.fromBooleanArray(<Array<boolean>>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
